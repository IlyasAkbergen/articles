{
  "openapi": "3.0.3",
  "info": {
    "title": "Articles API",
    "description": "A RESTful API for managing articles and authors, built with NestJS following Clean Architecture principles and CQRS pattern. Features include article management, author management, and JWT-based authentication with OTP verification.",
    "version": "1.0.0",
    "contact": {
      "name": "Iliyas Akbergen",
      "url": "https://github.com/IlyasAkbergen",
      "email": "iliyas@akbergen.info"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3030",
      "description": "Local development server"
    },
    {
      "url": "https://api.example.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User registration, login, and OTP verification endpoints"
    },
    {
      "name": "Articles",
      "description": "Article management endpoints - create, read, update, delete, publish"
    },
    {
      "name": "Authors",
      "description": "Author management endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "description": "Creates a new user account and sends an OTP to the provided email for verification.",
        "operationId": "register",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully. OTP sent to email.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors or user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify-otp": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Verify OTP",
        "description": "Verifies the OTP sent to user email during registration.",
        "operationId": "verifyOtp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOtpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyOtpResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid or expired OTP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticates a user and returns a JWT access token.",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - email not verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/resend-otp": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Resend OTP",
        "description": "Resends the OTP to the user email for verification.",
        "operationId": "resendOtp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendOtpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResendOtpResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - user not found or already verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/articles": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get all articles with pagination",
        "description": "Retrieves a paginated list of articles with optional filtering and sorting.",
        "operationId": "getAllArticles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["createdAt", "updatedAt", "title", "publishedAt"],
              "default": "createdAt"
            },
            "description": "Field to sort by"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["ASC", "DESC"],
              "default": "DESC"
            },
            "description": "Sort order"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search term for title or content"
          },
          {
            "name": "authorId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by author ID"
          },
          {
            "name": "published",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by publication status"
          }
        ],
        "responses": {
          "200": {
            "description": "Articles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedArticlesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "tags": ["Articles"],
        "summary": "Create a new article",
        "description": "Creates a new article with the provided title, content, and author ID.",
        "operationId": "createArticle",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateArticleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Article created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/articles/{id}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get article by ID",
        "description": "Retrieves a specific article by its unique identifier.",
        "operationId": "getArticle",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Article unique identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Article retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "put": {
        "tags": ["Articles"],
        "summary": "Update an article",
        "description": "Updates an existing article with new title and/or content.",
        "operationId": "updateArticle",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Article unique identifier"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArticleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "delete": {
        "tags": ["Articles"],
        "summary": "Delete an article",
        "description": "Permanently deletes an article from the system.",
        "operationId": "deleteArticle",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Article unique identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Article deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/articles/{id}/publish": {
      "post": {
        "tags": ["Articles"],
        "summary": "Publish an article",
        "description": "Changes the status of an article to published, making it visible to readers.",
        "operationId": "publishArticle",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Article unique identifier"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishArticleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "400": {
            "description": "Article already published",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/articles/{id}/unpublish": {
      "post": {
        "tags": ["Articles"],
        "summary": "Unpublish an article",
        "description": "Changes the status of an article to unpublished, hiding it from readers.",
        "operationId": "unpublishArticle",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Article unique identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Article unpublished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "400": {
            "description": "Article already unpublished",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/articles/author/{authorId}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get articles by author",
        "description": "Retrieves all articles written by a specific author.",
        "operationId": "getArticlesByAuthor",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "authorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Author unique identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Articles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleResponse"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/authors": {
      "get": {
        "tags": ["Authors"],
        "summary": "Get all authors",
        "description": "Retrieves a list of all authors in the system.",
        "operationId": "getAllAuthors",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Authors retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "tags": ["Authors"],
        "summary": "Create a new author",
        "description": "Creates a new author with the provided information. Only accessible by administrators.",
        "operationId": "createAuthor",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Author created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/authors/{id}": {
      "get": {
        "tags": ["Authors"],
        "summary": "Get author by ID",
        "description": "Retrieves a specific author by their unique identifier.",
        "operationId": "getAuthorById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Author unique identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Author retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/authors/email/{email}": {
      "get": {
        "tags": ["Authors"],
        "summary": "Get author by email",
        "description": "Retrieves a specific author by their email address.",
        "operationId": "getAuthorByEmail",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "Author email address"
          }
        ],
        "responses": {
          "200": {
            "description": "Author retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT token"
      }
    },
    "schemas": {
      "RegisterUserDto": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user",
            "example": "iliyas.akbergen@gmail.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)",
            "description": "Password for the user account",
            "example": "MySecurePassword123"
          }
        }
      },
      "VerifyOtpDto": {
        "type": "object",
        "required": ["userId", "code"],
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "User ID received during registration",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "code": {
            "type": "string",
            "minLength": 6,
            "maxLength": 6,
            "pattern": "^[0-9]{6}$",
            "description": "6-digit OTP code sent to user email",
            "example": "123456"
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user",
            "example": "iliyas.akbergen@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "Password for the user account",
            "example": "MySecurePassword123"
          }
        }
      },
      "ResendOtpDto": {
        "type": "object",
        "required": ["userId"],
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "User ID for which to resend OTP",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "CreateArticleDto": {
        "type": "object",
        "required": ["title", "content", "authorId"],
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The title of the article",
            "example": "Understanding Clean Architecture in NestJS"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "The content of the article in markdown format",
            "example": "This article explores the principles of Clean Architecture and how to implement them in a NestJS application..."
          },
          "authorId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the author",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "UpdateArticleDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The updated title of the article",
            "example": "Understanding Clean Architecture in NestJS - Updated"
          },
          "content": {
            "type": "string",
            "description": "The updated content of the article in markdown format",
            "example": "This updated article explores the principles of Clean Architecture..."
          }
        }
      },
      "PublishArticleDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Optional message for publishing the article",
            "example": "Article is ready for publication"
          }
        }
      },
      "CreateAuthorDto": {
        "type": "object",
        "required": ["firstName", "lastName", "email"],
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "description": "First name of the author",
            "example": "Iliyas"
          },
          "lastName": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "description": "Last name of the author",
            "example": "Akbergen"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the author",
            "example": "iliyas.akbergen@gmail.com"
          }
        }
      },
      "ArticleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the article",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "title": {
            "type": "string",
            "description": "Title of the article",
            "example": "Understanding Clean Architecture in NestJS"
          },
          "content": {
            "type": "string",
            "description": "Content of the article in markdown format",
            "example": "This article explores the principles of Clean Architecture and how to implement them in a NestJS application..."
          },
          "authorId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the author",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "authorName": {
            "type": "string",
            "description": "Full name of the author",
            "example": "Iliyas Akbergen"
          },
          "isPublished": {
            "type": "boolean",
            "description": "Whether the article is published",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the article was created",
            "example": "2025-08-08T10:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the article was last updated",
            "example": "2025-08-08T12:00:00Z"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date when the article was published",
            "example": "2025-08-08T12:00:00Z"
          },
          "wordCount": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of words in the article content",
            "example": 150
          }
        }
      },
      "AuthorResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the author",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the author",
            "example": "Iliyas"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the author",
            "example": "Akbergen"
          },
          "fullName": {
            "type": "string",
            "description": "Full name of the author",
            "example": "Iliyas Akbergen"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the author",
            "example": "iliyas.akbergen@gmail.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the author was created",
            "example": "2025-08-08T10:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the author was last updated",
            "example": "2025-08-08T12:00:00Z"
          }
        }
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1,
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of items per page",
            "example": 10
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of items",
            "example": 25
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of pages",
            "example": 3
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Whether there is a next page",
            "example": true
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Whether there is a previous page",
            "example": false
          }
        }
      },
      "PaginatedArticlesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArticleResponse"
            },
            "description": "Array of paginated articles"
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "RegisterResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "User registered successfully. Please check your email for OTP verification."
          },
          "data": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "format": "uuid",
                "example": "123e4567-e89b-12d3-a456-426614174000"
              },
              "email": {
                "type": "string",
                "format": "email",
                "example": "iliyas.akbergen@gmail.com"
              }
            }
          }
        }
      },
      "VerifyOtpResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Email verified successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "format": "uuid",
                "example": "123e4567-e89b-12d3-a456-426614174000"
              },
              "verified": {
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Login successful"
          },
          "data": {
            "type": "object",
            "properties": {
              "accessToken": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              },
              "user": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "iliyas.akbergen@gmail.com"
                  },
                  "role": {
                    "type": "string",
                    "example": "user"
                  }
                }
              }
            }
          }
        }
      },
      "ResendOtpResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "OTP sent successfully"
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Operation completed successfully"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "An error occurred"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["Field is required", "Invalid format"]
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request - validation errors",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - invalid or missing JWT token",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    }
  }
}
